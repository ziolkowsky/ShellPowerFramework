param(
    [switch]$Advanced=$Global:Advanced,
    [switch]$Auto=$Global:Auto,
    [string]$CodeType=$Global:CodeType,
    [switch]$CommentBasedHelp=$Global:CommentBasedHelp,
    [Parameter(Position=0)]
    [string]$Filename=$Global:Filename,
    [switch]$Force=$Global:Force
)

function Global:Set-CommentBasedHelp{
return "`n<#
.SYNOPSIS

.DESCRIPTION

$(Get-Examples)

.PARAMETER Param1

.NOTES
$(Get-Author)

.LINK
$(Parse-DString SPFramework) : https://github.com/ziolkowsky/ShellPowerFramework
#>"
}

function Global:Get-Examples{
    if($CodeType -eq 'Both'){
        return @"
.EXAMPLE
PS> $($Functionname)

.EXAMPLE
PS> .\$f
"@
    }else{
     return @"
.EXAMPLE
PS> 
"@ + $(if($CodeType -eq 'Function'){$Functionname}else{".\$f"})
    }
}

function Get-ScriptConfiguration{
    return "`$ErrorActionPreference='Stop'
Set-WorkingDirectory"
}

function Set-ScriptConfiguration{
    Get-ScriptConfiguration | Out-File $f -Append
}

function Set-Script{
    if($Advanced){
        @"
[CmdLetBinding()]
param(`$Param1)
begin{

"@ + (Parse-String $(Get-ScriptConfiguration)) +@"

"@ + $(if($CodeType -eq 'Both' -and $Advanced){Parse-String $(Get-Function -CommentBasedHelp:$CommentBasedHelp)}) +@"


}

process{
    
}

end{
    
}
"@ | Out-File $f -Append
        return
    }

"param(`$Param1)

$(Get-ScriptConfiguration)" | Out-File $f -Append
    return
  
}

function Get-Notes{
    if($n){
        $c=@"
.NOTES
"@ + $() + @"

Generated by ShellPowerFramework $(Get-Date)
"@
        return "$c"
    }
}

function Global:Get-Author{
    $n=$Config.Keys -eq 'author.name'
    $n+=$Config.Keys | ? {$_ -ne 'author.name' -and $_ -match '^author.'} | sort
    $c=$null
    if($n){
        $n | foreach {
            # get rid everything before dot
            $pn=$_.split('.')[1]
            # make sure first char is capitalized and rest is not
            $fn=$pn.substring(0,1).toUpper()+$pn.substring(1, $pn.length - 1).toLower()
            $c+=@"
"@ + "$(Parse-DString $fn) : $($Config.$_)
"
        }
        $c+=@"

Generated by ShellPowerFramework $(Get-Date)
"@
    }
    return $c
}

function Global:Parse-DString{
    $r=$args[0]
    $al=$r.length
    if($al -lt 4){
        return $r +"`t`t`t`t"
    }
    if($al -eq 4){
        return $r + "`t`t`t"
    }
    if($al -gt 4 -and $al -lt 8){
        return $r + "`t`t`t"
    }
    if($al -ge 8 -and $al -lt 17){
        return $r + "`t`t"
    }
    return $r
}

function Get-Indent{
    param([int]$Level=0)
    if($Level -gt 0){
        1..$Level | foreach{
            $iLevel+="`t"
        }
        return $iLevel
    }
}

function Global:Get-Function{
    param(
        [Parameter(Position=0)]
        [string]$FunctionName,
        [int]$IndentLevel=0,
        [switch]$CommentBasedHelp
    )
    if(!$FunctionName){$FunctionName='New-Function'}
    
if($Advanced){
return @"
function $($Functionname){
    [CmdletBinding()]
    Param(
        [Parameter(Position=0)]
        [string] `$Param1
    )
    begin{
    
    }
    Process{
        Write-Host `"Param1 = `$Param1`"
    }

    end{
    
    }
    $(if($CommentBasedHelp){Set-CommentBasedHelp})
}

"@
}

return @"
function $($FunctionName){
    param(
        [Parameter(Position=0)]
        `$Param1
    )
$(if($CommentBasedHelp){Set-CommentBasedHelp})
}

"@
}

function Set-Function{
    param([string]$fn=$Functionname)
    $(Get-Function $fn -CommentBasedHelp:$CommentBasedHelp) | Out-File $f -Append
}

function Parse-String{
    param([string]$c)
    $pc=@()
    $Ind=Get-Indent $IndentLevel
    $c -split "`r`n" | foreach {
        $pc+="$Ind$_`n"
    }
    return $pc
}

function Create-Init{
    param([string]$f=$Filename,
    [string]$fn=$Functionname
    )

    if($Auto){   
        $f=Parse-Filename
        if(!$Force -and (Test-Path $f)){
            # do not overwrite file
            Write-Host "File already exist."
        }else{
            try{
               # Create-File -fn $f
                switch($CodeType){
                    "Function"{
                        Set-ScriptConfiguration
                        Set-Function
                    }
                    "Script"{
                        Set-Script
                    }
                    "Both"{
                        Set-Script
                        Set-Function
                    }
                }
                Open-File $f
            }catch{
                throw $_
            }
        }
    }
}
<#
    .DESCRIPTION 
    Creates schemes for files and functions.

    .SYNOPSIS 
    Creates schemes for files and functions. 

    .EXAMPLE 
    PS> Creating.ps1 

    .NOTES
    Author : Sebastian Ziółkowski
    Website: ziolkowsky.wordpress.com
    GitHub : github.com/ziolkowsky

    .LINK 
    Framework: https://github.com/ziolkowsky/ShellPowerFramework
#>